#Creating your first workflow
# in dir .githib/workflows create a main.yaml

name: My First Workflow

on: [push]                              # Trigger on Push Event

jobs:  
  build:                                # build job
    runs-on: ubuntu-latest              # runner

    steps:                              # git checkout step
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Hello World                 # running a single command
      run: echo "Hello, World!"

    - name: Multiline commands
      run: |
        echo "Hello, adi!"
        echo "Hello, ahil!"
# name: A human-readable name for your workflow.
# on: Defines the trigger for the workflow. In this case, it runs on every push.
# jobs: Defines one or more jobs to be run in parallel.
# runs-on: Specifies the type of runner (execution environment). ubuntu-latest is a commonly used option.
# steps: Lists the individual tasks to be performed. The uses field specifies the action to be used, and the run field contains the command to be executed.


### using manual trigger 
# use below event trigger and env variabes and secrets


name: Workflow with manual trigger and Environment Variables

on:
  workflow_dispatch: # Manual trigger
env:
  WORKFLOW_ENV_VARIABLE: "Workflow Level"

jobs:
  example_job:
    runs-on: ubuntu-latest
    env:
      JOB_ENV_VARIABLE: "Job Level"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Print Environment Variables
      run: |
        echo "Workflow Level Environment Variable: $WORKFLOW_ENV_VARIABLE"
        echo "Job Level Environment Variable: $JOB_ENV_VARIABLE"
        echo "Step Level Environment Variable: ${{ env.STEP_ENV_VARIABLE }}"
      env:
        STEP_ENV_VARIABLE: "Step Level"

# Note that step-level environment variables need to be accessed using the ${{ env.VARIABLE_NAME }} syntax.

### Job dependency 
name: Dependent Jobs Example

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    needs: [setup]  # Build job depends on setup job

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build
        run: |
          echo "build commands"
          echo " build completed"
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: some random commands
        run: echo "setup done"

  test:
    runs-on: ubuntu-latest
    needs: build  # The 'test' job depends on the 'build' job

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Run Tests
        run: |
          echo " test commands"
          echo " test completed"


###### using matrix and local scripts 

#write a small script in path .github/scripts/print_python_version.sh
#!/bin/bash

echo "Python Version: $(python --version)"

# and paste the below workflow
name: Matrix Workflow

on:
  workflow_dispatch:

jobs:
  print_python_version:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.8, 3.9]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print Python Version
        run: |
          chmod +x .github/scripts/print_python_version.sh
          ./.github/scripts/print_python_version.sh
          echo " workflow will run in ${{ matrix.os }} machine"


###### reusable workflow example

name: 'Reusable  workflow'

on: 
  workflow_call:

    inputs:
      workflow_input:
        description: 'input for workflow'
        required: true
        type: string


jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      WORKFLOW_ENV: "some env vars"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: step single commands
        run: echo "this is coming from shared workflow"

      - name: step running commands
        run: |
         echo "input value -> ${{ inputs.workflow_input }}"
         echo "env var is ${{ env.WORKFLOW_ENV }}"


#### calling reusable workflow
name: resuing  workflow 

on:
  workflow_dispatch:

jobs:
  terraform:
        uses: ./.github/workflows/reusable.yaml
        with:
          workflow_input: ' input while calling reusable workflow' 


# python linting

#requirements.txt
flake8==3.9.2   # Specify the desired version of Flake8
pytest==6.2.4   # Specify the desired version of pytest

#test_calculator.py
from calculator import add

def test_add():
    assert add(2, 3) == 5
    assert add(-1, 1) == 0
    assert add(0, 0) == 0

#calculator.py
def add(a, b):
    return a + b

print(f' adding 4,5 will result in {add(4,5)}')
#.github/workflows/python-ci.yml
name: Python CI

on:
  push:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # - name: Lint Code
      #   run: flake8

      - name: Run Tests
        run: pytest
